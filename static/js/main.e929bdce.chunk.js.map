{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Wrapper/Wrapper.js","components/Header/Header.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","handleGuesses","id","concat","type","alt","name","src","image","Wrapper","children","Header","score","highScore","msg","App","state","friends","classArr","restartGame","_this","setState","forEach","count","removeShake","setTimeout","this","pop","bind","Object","assertThisInitialized","i","length","sort","b","Math","random","push","_this2","components_Wrapper_Wrapper","components_Header_Header","map","friend","components_FriendCard_FriendCard","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e929bdce.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FriendCard.css\";\n \nconst FriendCard = props => (\n  // attach the handleGuesses function (that takes an id)\n  <div className=\"card\" onClick={() => props.handleGuesses(props.id)}>\n    {/* type will be the class 'shake' that's added/deleted as needed */}\n    <div className={`img-container ${props.type}`}>\n      {/* the image gets its alt name and source */}\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default FriendCard;","import React from \"react\";\nimport \"./Wrapper.css\";\n\n// props.children includes everything within this div tag, which will be the title and image\n// wrapper is a generic box that doesn't know it's children ahead of time\nconst Wrapper = props => \n<div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = props => (\n\n<div>\n  <nav className=\"fixed-top navbar\">\n    <div className=\"row\">\n      <h1 className=\"col-sm\">\n        Clicky Game\n      </h1> \n      <div className=\"col-sm\" id=\"directions\">\n        <p className=\"col-sm\">Click an image to earn points, but don't click on any more than once!</p>\n      </div>\n      <div className=\"col-sm\" id=\"directions\">\n        <div className=\"row\">\n          <span className=\"col-sm\" id=\"score\">Score:  {props.score} | Highscore: {props.highScore} </span>\n        </div>\n        <div className=\"row guess\">\n          <p id=\"guessMsg\">{props.msg}</p>\n        </div>\n      </div>\n    </div>\n  </nav> \n</div>\n);\nexport default Header;","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport friends from \"./friends.json\";\nimport \"./App.css\";\n\n//class = special function\nclass App extends Component {\n  // Setting this.state.friends to the friends json array -- state is the place where the data comes from\n  state = {\n    friends,\n    score: 0,\n    highScore: 0,\n    msg: \"\",\n    classArr:[]\n  };\n\n  restartGame = () => {\n    //if the current score is higher than highScore, reset highScore\n    if (this.state.score > this.state.highScore){\n      this.setState({highScore: this.state.score});\n    }\n\n    //set each card's count, the score back to 0 and remove shake class\n    this.state.friends.forEach(friends => {friends.count = 0;})\n    this.setState({score: 0});\n    this.removeShake();\n  }\n\n  //removes shake class from cards and guess msg from header\n  removeShake = () => {\n    setTimeout(function(){this.state.classArr.pop(\"shake\")}.bind(this), 1000);\n    setTimeout(function(){this.setState({msg: \"\"})}.bind(this), 1000);\n  }\n\n  handleGuesses = id => {\n    //search through friends to find the one clicked \n    for (var i=0; i< this.state.friends.length; i++){\n      if (friends[i].id === id){\n        //if the current card count=1 (used as a flag), restart the game\n        if (friends[i].count === 1){\n          this.setState({msg: \"Ooops! You guessed Wrong!\"});\n          //add shake class; signifies a missed guess\n          this.state.classArr.push(\"shake\");\n          this.restartGame();\n        }\n        //otherwise, set the card count to 1\n        else {\n          this.setState({msg: \"Yeppyyy! You guessed correctly!\"});\n          friends[i].count = 1;\n          //update the score +1\n          this.setState({score: this.state.score + 1});\n          // shuffle cards using array.sort randomly\n          this.state.friends.sort(function(a, b){return 0.5 - Math.random()});\n          break;          \n        }\n      }\n    }\n  }\n \n  render() {\n    return (\n      <Wrapper>\n        {/* feed properties into the header: score, high score, message */}\n        <Header score={this.state.score} highScore = {this.state.highScore} msg = {this.state.msg}>Friends List</Header>\n        \n        {/* Map over this.state.friends and render a FriendCard component for each friend object;\n        feed properties into the card: id, key, image, type(shake class or no classes), the handleGuesses function */}\n        {this.state.friends.map(friend => (\n          <FriendCard\n            handleGuesses={this.handleGuesses}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n            type={this.state.classArr}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}